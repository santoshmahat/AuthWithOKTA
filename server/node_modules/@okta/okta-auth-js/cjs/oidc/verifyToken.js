"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.verifyToken = verifyToken;

var _oidc = require("../oidc");

var _errors = require("../errors");

var _decodeToken = require("./decodeToken");

var sdkCrypto = _interopRequireWildcard(require("../crypto"));

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
// Verify the id token
function verifyToken(sdk, token, validationParams) {
  return Promise.resolve().then(function () {
    if (!token || !token.idToken) {
      throw new _errors.AuthSdkError('Only idTokens may be verified');
    }

    var jwt = (0, _decodeToken.decodeToken)(token.idToken);
    var validationOptions = {
      clientId: sdk.options.clientId,
      issuer: sdk.options.issuer,
      ignoreSignature: sdk.options.ignoreSignature
    };
    Object.assign(validationOptions, validationParams); // Standard claim validation

    (0, _oidc.validateClaims)(sdk, jwt.payload, validationOptions); // If the browser doesn't support native crypto or we choose not
    // to verify the signature, bail early

    if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {
      return token;
    }

    return (0, _oidc.getKey)(sdk, token.issuer, jwt.header.kid).then(function (key) {
      return sdkCrypto.verifyToken(token.idToken, key);
    }).then(function (valid) {
      if (!valid) {
        throw new _errors.AuthSdkError('The token signature is not valid');
      }

      if (validationParams && validationParams.accessToken && token.claims.at_hash) {
        return sdkCrypto.getOidcHash(validationParams.accessToken).then(hash => {
          if (hash !== token.claims.at_hash) {
            throw new _errors.AuthSdkError('Token hash verification failed');
          }
        });
      }
    }).then(() => {
      return token;
    });
  });
}